version: '3'

volumes:
  # (Auto-generated) secrets for...
  # ... the ldap container
  secrets-ldap:
  # ... read-only (bind) credentials for ldap
  secrets-ldap-bind:
  # ... the keycloak container
  secrets-keycloak:
  # ... the crowd container
  secrets-crowd:
  # ... the bitbucket container
  secrets-bitbucket:
  # ... secrets shared between bitbucket and crowd containers
  secrets-crowd-bitbucket:
  # ... the certificate authority (private key(s) for CA)
  secrets-certs-ca-private:
  # ... the certificate authority cert(s)
  secrets-certs-ca-shared:
  # ... the proxy container
  secrets-certs-proxy:
  # ... the mitm container
  secrets-certs-mitm:

  # Crowd server storage
  crowd-data:
  # Bitbucket server storage
  bitbucket-data:

services:

  # Container used to auto-generate secrets (any time the volumes are wiped)
  secrets:
    hostname: secrets.auth-demo.docker
    build: secrets
    security_opt:
      # Disable SElinux for volume mounts (since we're using a host mount)
      - "label=disable"
    volumes:
      - "./ldap:/opt/ldap-init:ro"
      - "secrets-ldap:/secrets/ldap:rw"
      - "secrets-ldap-bind:/secrets/ldap-bind:rw"
      - "secrets-keycloak:/secrets/keycloak:rw"
      - "secrets-crowd:/secrets/crowd:rw"
      - "secrets-bitbucket:/secrets/bitbucket:rw"
      - "secrets-crowd-bitbucket:/secrets/crowd-bitbucket:rw"
      - "secrets-certs-ca-private:/secrets/certs/ca-private:rw"
      - "secrets-certs-ca-shared:/secrets/certs/ca-shared:rw"
      - "secrets-certs-proxy:/secrets/certs/proxy:rw"
      - "secrets-certs-mitm:/secrets/certs/mitm:rw"
    networks:
      network:
        ipv4_address: "${ENV_IP_PREFIX}.6"

  mitm:
    image: mitmproxy/mitmproxy:latest
    hostname: mitm.auth-demo.docker
    environment:
      REQUESTS_CA_BUNDLE: "/etc/ssl/certs/ca-certificates.crt"
      SSL_CERT_FILE: "/etc/ssl/certs/ca-certificates.crt"
    entrypoint: ["/bin/bash", "/opt/mitm/entrypoint-install-cacerts-mitm.sh"]
    command:
      - "mitmweb"
      # Tell MITM Proxy to trust our CA for upstream services
      - "--set"
      - "ssl_verify_upstream_trusted_confdir=/etc/ssl/certs/"
      # Tell the MITM web UI to respond to the IP address inside of the docker network
      # instead of "127.0.0.1:8081" (no need to expose the port on the host)
      # NOTE: This does not change the actual listening port, it only defines
      #       the "hostname" (must be an IP) that the UI responds to
      #       (instead of forwarding the request an upstream server).
      # NOTE: "ENV_IP_PREFIX" is a feature of the auth-demo environment (defined in .env)--just a static IP.
      - "--set"
      - "web_host=${ENV_IP_PREFIX}.9"
      # Point at our custom CA cert/key for issuing MITM certs
      - "--set"
      - "confdir=/secrets/certs/mitm/"
    security_opt:
      # Disable SElinux for volume mounts (since we're using a host mount)
      - "label=disable"
    volumes:
      - "secrets-certs-ca-shared:/secrets/certs/ca-shared:ro"
      # Grants MITM Proxy access to a copy of our CA private key
      - "secrets-certs-mitm:/secrets/certs/mitm:rw"
      - "./mitm:/opt/mitm:ro"
    networks:
      network:
        # Set a static IP (a convention of the auth-demo environment)
        # NOTE: "ENV_IP_PREFIX" is a feature of the auth-demo environment.
        #       It's just an arbitrary hard-coded IP rnage that auth-demo users can tweak to avoid collisions.
        ipv4_address: "${ENV_IP_PREFIX}.9"
    # Wait for the secrets container to complete before starting
    depends_on:
      secrets:
        condition: service_completed_successfully

  proxy:
    hostname: proxy.auth-demo.docker
    image: haproxy:2.7.1
    security_opt:
      # Disable SElinux for volume mounts (since we're using a host mount)
      - "label=disable"
    volumes:
      - ./proxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - "secrets-certs-ca-shared:/secrets/certs/ca-shared:ro"
      - "secrets-certs-proxy:/secrets/certs/proxy:ro"
    expose:
      - "443"
    networks:
      network:
        ipv4_address: "${ENV_IP_PREFIX}.8"
        aliases:
          - ldap-ui.proxy.auth-demo.docker
          - keycloak.proxy.auth-demo.docker
          - crowd.proxy.auth-demo.docker
          - bitbucket.proxy.auth-demo.docker
    depends_on:
      secrets:
        condition: service_completed_successfully

  ldap:
    hostname: ldap.auth-demo.docker
    image: osixia/openldap:1.5.0
    environment:
      LDAP_ORGANISATION: "Example Inc."
      LDAP_DOMAIN: "example.com"
      LDAP_BASE_DN: "dc=example,dc=com"
      LDAP_SEED_INTERNAL_LDIF_PATH: "/secrets/ldap/ldap-init.ldif"
    security_opt:
      # Disable SElinux for volume mounts (since we're using a host mount)
      - "label=disable"
    volumes:
      - "./ldap:/opt/ldap-init:ro"
      # Load my-secrets.yaml as an environment file
      - "secrets-ldap:/container/environment/01-custom:ro"
      - "secrets-ldap:/secrets/ldap:ro"
    healthcheck:
      test: ["CMD", "ldapwhoami", "-D", "cn=admin,dc=example,dc=com", "-y", "/secrets/ldap/admin_password", "-H", "ldap://ldap:389"]
      interval: 15s
      timeout: 5s
      retries: 4
      start_period: 10s
    networks:
      network:
        ipv4_address: "${ENV_IP_PREFIX}.2"
    depends_on:
      secrets:
        condition: service_completed_successfully

  ldap-ui:
    hostname: ldap-ui.auth-demo.docker
    # NOTE: There isn't a tagged version near as new as ":latest", so I'm leaving it as ":latest".
    #       That being said, this base image looks like abandonware (2 years old).
    image: osixia/phpldapadmin:latest
    environment:
      PHPLDAPADMIN_LDAP_HOSTS: "ldap.auth-demo.docker"
    networks:
      network:
        ipv4_address: "${ENV_IP_PREFIX}.5"
    depends_on:
      secrets:
        condition: service_completed_successfully

  keycloak:
    hostname: keycloak.auth-demo.docker
    image: jboss/keycloak:16.1.1
    environment:
      KEYCLOAK_USER_FILE: "/secrets/keycloak/admin_username"
      KEYCLOAK_PASSWORD_FILE: "/secrets/keycloak/admin_password"
      PROXY_ADDRESS_FORWARDING: "true"
    security_opt:
      # Disable SElinux for volume mounts (since we're using a host mount)
      - "label=disable"
    # TODO: Consider mirror data dirs in the same way as atlassian services
    volumes:
      - "secrets-keycloak:/secrets/keycloak:ro"
    networks:
      network:
        ipv4_address: "${ENV_IP_PREFIX}.7"
    depends_on:
      secrets:
        condition: service_completed_successfully

  crowd:
    hostname: crowd.auth-demo.docker
    image: atlassian/crowd:5.1.1
    environment:
      CROWD_DB_URL: jdbc:postgresql://crowd-db:5432/crowd
      CROWD_DB_USER: postgres
      CROWD_DB_PASSWORD: password
    security_opt:
      # Disable SElinux for volume mounts (since we're using a host mount)
      - "label=disable"
    volumes:
      - crowd-data:/var/atlassian/application-data/crowd
      # This adds trust of the reverse proxy
      - ./crowd/server.xml:/opt/atlassian/crowd/apache-tomcat/conf/server.xml:ro
    networks:
      network:
        ipv4_address: "${ENV_IP_PREFIX}.4"
    depends_on:
      secrets:
        condition: service_completed_successfully

  bitbucket:
    hostname: bitbucket.auth-demo.docker
    image: atlassian/bitbucket:8.7.0
    environment:
      SERVER_PROXY_NAME: "bitbucket.proxy.auth-demo.docker"
      SERVER_PROXY_PORT: "443"
      SERVER_SCHEME: "https"
      SERVER_SECURE: "true"
      # "javax.net.ssl.trustStore":
      #   Enable trust of our our self-signed CA
      #   (not technically necessary at the time of this writing)
      # "http.proxy":
      #   Add outbound proxy settings for MITM Proxy
      JVM_SUPPORT_RECOMMENDED_ARGS: >-
        -Djavax.net.ssl.trustStore=/secrets/certs/ca-shared/cacerts.jks
        -Djavax.net.ssl.trustStorePassword=changeit
        -Dhttp.proxyHost=mitm.auth-demo.docker
        -Dhttp.proxyPort=8080
        -Dhttps.proxyHost=mitm.auth-demo.docker
        -Dhttps.proxyPort=8080
        -Dhttp.nonProxyHosts=localhost

    security_opt:
      # Disable SElinux for volume mounts (since we're using a host mount)
      - "label=disable"
    volumes:
      - "bitbucket-data:/var/atlassian/application-data/bitbucket:rw"
      - "secrets-certs-ca-shared:/secrets/certs/ca-shared:ro"
    networks:
      network:
        ipv4_address: "${ENV_IP_PREFIX}.3"
    depends_on:
      secrets:
        condition: service_completed_successfully

networks:
  network:
    driver: bridge
    ipam:
      config:
        # NOTE: We set static IPs because Crowd depends upon an IP whitelist.
        #       Otherwise we would have to re-set the whitelist on every restart.
        - subnet: "${ENV_IP_PREFIX}.0/16"
          gateway: "${ENV_IP_PREFIX}.1"
